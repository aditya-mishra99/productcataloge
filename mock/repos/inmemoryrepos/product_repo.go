// Code generated by MockGen. DO NOT EDIT.
// Source: ./repos/inmemoryrepos/product_repo.go

// Package mock_inmemoryrepos is a generated GoMock package.
package mock_inmemoryrepos

import (
	models "awesomeProject1/models"
	reflect "reflect"

	gomock "github.com/golang/mock/gomock"
)

// MockProductRepo is a mock of ProductRepo interface.
type MockProductRepo struct {
	ctrl     *gomock.Controller
	recorder *MockProductRepoMockRecorder
}

// MockProductRepoMockRecorder is the mock recorder for MockProductRepo.
type MockProductRepoMockRecorder struct {
	mock *MockProductRepo
}

// NewMockProductRepo creates a new mock instance.
func NewMockProductRepo(ctrl *gomock.Controller) *MockProductRepo {
	mock := &MockProductRepo{ctrl: ctrl}
	mock.recorder = &MockProductRepoMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockProductRepo) EXPECT() *MockProductRepoMockRecorder {
	return m.recorder
}

// AddProduct mocks base method.
func (m *MockProductRepo) AddProduct(product models.Product) models.Product {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "AddProduct", product)
	ret0, _ := ret[0].(models.Product)
	return ret0
}

// AddProduct indicates an expected call of AddProduct.
func (mr *MockProductRepoMockRecorder) AddProduct(product interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "AddProduct", reflect.TypeOf((*MockProductRepo)(nil).AddProduct), product)
}

// CheckProductAvailableById mocks base method.
func (m *MockProductRepo) CheckProductAvailableById(id int) bool {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CheckProductAvailableById", id)
	ret0, _ := ret[0].(bool)
	return ret0
}

// CheckProductAvailableById indicates an expected call of CheckProductAvailableById.
func (mr *MockProductRepoMockRecorder) CheckProductAvailableById(id interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CheckProductAvailableById", reflect.TypeOf((*MockProductRepo)(nil).CheckProductAvailableById), id)
}

// GetAllProduct mocks base method.
func (m *MockProductRepo) GetAllProduct() []models.Product {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetAllProduct")
	ret0, _ := ret[0].([]models.Product)
	return ret0
}

// GetAllProduct indicates an expected call of GetAllProduct.
func (mr *MockProductRepoMockRecorder) GetAllProduct() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetAllProduct", reflect.TypeOf((*MockProductRepo)(nil).GetAllProduct))
}

// GetAvailableProducts mocks base method.
func (m *MockProductRepo) GetAvailableProducts() []models.Product {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetAvailableProducts")
	ret0, _ := ret[0].([]models.Product)
	return ret0
}

// GetAvailableProducts indicates an expected call of GetAvailableProducts.
func (mr *MockProductRepoMockRecorder) GetAvailableProducts() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetAvailableProducts", reflect.TypeOf((*MockProductRepo)(nil).GetAvailableProducts))
}

// GetProductById mocks base method.
func (m *MockProductRepo) GetProductById(id int) models.Product {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetProductById", id)
	ret0, _ := ret[0].(models.Product)
	return ret0
}

// GetProductById indicates an expected call of GetProductById.
func (mr *MockProductRepoMockRecorder) GetProductById(id interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetProductById", reflect.TypeOf((*MockProductRepo)(nil).GetProductById), id)
}

// GetProductQuantityById mocks base method.
func (m *MockProductRepo) GetProductQuantityById(id int) int {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetProductQuantityById", id)
	ret0, _ := ret[0].(int)
	return ret0
}

// GetProductQuantityById indicates an expected call of GetProductQuantityById.
func (mr *MockProductRepoMockRecorder) GetProductQuantityById(id interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetProductQuantityById", reflect.TypeOf((*MockProductRepo)(nil).GetProductQuantityById), id)
}

// IncreaseProductQuantity mocks base method.
func (m *MockProductRepo) IncreaseProductQuantity(quantity models.Product, id int) {
	m.ctrl.T.Helper()
	m.ctrl.Call(m, "IncreaseProductQuantity", quantity, id)
}

// IncreaseProductQuantity indicates an expected call of IncreaseProductQuantity.
func (mr *MockProductRepoMockRecorder) IncreaseProductQuantity(quantity, id interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "IncreaseProductQuantity", reflect.TypeOf((*MockProductRepo)(nil).IncreaseProductQuantity), quantity, id)
}

// ReduceProductQuantity mocks base method.
func (m *MockProductRepo) ReduceProductQuantity(quantity models.Product, id int) {
	m.ctrl.T.Helper()
	m.ctrl.Call(m, "ReduceProductQuantity", quantity, id)
}

// ReduceProductQuantity indicates an expected call of ReduceProductQuantity.
func (mr *MockProductRepoMockRecorder) ReduceProductQuantity(quantity, id interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ReduceProductQuantity", reflect.TypeOf((*MockProductRepo)(nil).ReduceProductQuantity), quantity, id)
}
