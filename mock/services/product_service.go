// Code generated by MockGen. DO NOT EDIT.
// Source: ./services/product_service.go

// Package mock_services is a generated GoMock package.
package mock_services

import (
	models "awesomeProject1/models"
	reflect "reflect"

	gomock "github.com/golang/mock/gomock"
)

// MockProductService is a mock of ProductService interface.
type MockProductService struct {
	ctrl     *gomock.Controller
	recorder *MockProductServiceMockRecorder
}

// MockProductServiceMockRecorder is the mock recorder for MockProductService.
type MockProductServiceMockRecorder struct {
	mock *MockProductService
}

// NewMockProductService creates a new mock instance.
func NewMockProductService(ctrl *gomock.Controller) *MockProductService {
	mock := &MockProductService{ctrl: ctrl}
	mock.recorder = &MockProductServiceMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockProductService) EXPECT() *MockProductServiceMockRecorder {
	return m.recorder
}

// AddNewProduct mocks base method.
func (m *MockProductService) AddNewProduct(product models.Product) models.Product {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "AddNewProduct", product)
	ret0, _ := ret[0].(models.Product)
	return ret0
}

// AddNewProduct indicates an expected call of AddNewProduct.
func (mr *MockProductServiceMockRecorder) AddNewProduct(product interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "AddNewProduct", reflect.TypeOf((*MockProductService)(nil).AddNewProduct), product)
}

// GetAllProduct mocks base method.
func (m *MockProductService) GetAllProduct() []models.Product {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetAllProduct")
	ret0, _ := ret[0].([]models.Product)
	return ret0
}

// GetAllProduct indicates an expected call of GetAllProduct.
func (mr *MockProductServiceMockRecorder) GetAllProduct() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetAllProduct", reflect.TypeOf((*MockProductService)(nil).GetAllProduct))
}

// GetAvailableProduct mocks base method.
func (m *MockProductService) GetAvailableProduct() []models.Product {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetAvailableProduct")
	ret0, _ := ret[0].([]models.Product)
	return ret0
}

// GetAvailableProduct indicates an expected call of GetAvailableProduct.
func (mr *MockProductServiceMockRecorder) GetAvailableProduct() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetAvailableProduct", reflect.TypeOf((*MockProductService)(nil).GetAvailableProduct))
}

// GetProductById mocks base method.
func (m *MockProductService) GetProductById(id int) (models.Product, int) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetProductById", id)
	ret0, _ := ret[0].(models.Product)
	ret1, _ := ret[1].(int)
	return ret0, ret1
}

// GetProductById indicates an expected call of GetProductById.
func (mr *MockProductServiceMockRecorder) GetProductById(id interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetProductById", reflect.TypeOf((*MockProductService)(nil).GetProductById), id)
}

// IncreaseProductQuantity mocks base method.
func (m *MockProductService) IncreaseProductQuantity(quantity models.Product, id int) {
	m.ctrl.T.Helper()
	m.ctrl.Call(m, "IncreaseProductQuantity", quantity, id)
}

// IncreaseProductQuantity indicates an expected call of IncreaseProductQuantity.
func (mr *MockProductServiceMockRecorder) IncreaseProductQuantity(quantity, id interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "IncreaseProductQuantity", reflect.TypeOf((*MockProductService)(nil).IncreaseProductQuantity), quantity, id)
}

// ReduceProductQuantity mocks base method.
func (m *MockProductService) ReduceProductQuantity(quantity models.Product, id int) int {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ReduceProductQuantity", quantity, id)
	ret0, _ := ret[0].(int)
	return ret0
}

// ReduceProductQuantity indicates an expected call of ReduceProductQuantity.
func (mr *MockProductServiceMockRecorder) ReduceProductQuantity(quantity, id interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ReduceProductQuantity", reflect.TypeOf((*MockProductService)(nil).ReduceProductQuantity), quantity, id)
}
