// Code generated by MockGen. DO NOT EDIT.
// Source: ./controller/product_controller.go

// Package mock_controller is a generated GoMock package.
package mock_controller

import (
	http "net/http"
	reflect "reflect"

	gomock "github.com/golang/mock/gomock"
)

// MockProductController is a mock of ProductController interface.
type MockProductController struct {
	ctrl     *gomock.Controller
	recorder *MockProductControllerMockRecorder
}

// MockProductControllerMockRecorder is the mock recorder for MockProductController.
type MockProductControllerMockRecorder struct {
	mock *MockProductController
}

// NewMockProductController creates a new mock instance.
func NewMockProductController(ctrl *gomock.Controller) *MockProductController {
	mock := &MockProductController{ctrl: ctrl}
	mock.recorder = &MockProductControllerMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockProductController) EXPECT() *MockProductControllerMockRecorder {
	return m.recorder
}

// BuyProduct mocks base method.
func (m *MockProductController) BuyProduct(w http.ResponseWriter, r *http.Request) {
	m.ctrl.T.Helper()
	m.ctrl.Call(m, "BuyProduct", w, r)
}

// BuyProduct indicates an expected call of BuyProduct.
func (mr *MockProductControllerMockRecorder) BuyProduct(w, r interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "BuyProduct", reflect.TypeOf((*MockProductController)(nil).BuyProduct), w, r)
}

// CreateProduct mocks base method.
func (m *MockProductController) CreateProduct(w http.ResponseWriter, r *http.Request) {
	m.ctrl.T.Helper()
	m.ctrl.Call(m, "CreateProduct", w, r)
}

// CreateProduct indicates an expected call of CreateProduct.
func (mr *MockProductControllerMockRecorder) CreateProduct(w, r interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreateProduct", reflect.TypeOf((*MockProductController)(nil).CreateProduct), w, r)
}

// GetAllProduct mocks base method.
func (m *MockProductController) GetAllProduct(w http.ResponseWriter, r *http.Request) {
	m.ctrl.T.Helper()
	m.ctrl.Call(m, "GetAllProduct", w, r)
}

// GetAllProduct indicates an expected call of GetAllProduct.
func (mr *MockProductControllerMockRecorder) GetAllProduct(w, r interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetAllProduct", reflect.TypeOf((*MockProductController)(nil).GetAllProduct), w, r)
}

// GetAvailableProduct mocks base method.
func (m *MockProductController) GetAvailableProduct(w http.ResponseWriter, r *http.Request) {
	m.ctrl.T.Helper()
	m.ctrl.Call(m, "GetAvailableProduct", w, r)
}

// GetAvailableProduct indicates an expected call of GetAvailableProduct.
func (mr *MockProductControllerMockRecorder) GetAvailableProduct(w, r interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetAvailableProduct", reflect.TypeOf((*MockProductController)(nil).GetAvailableProduct), w, r)
}

// GetProductById mocks base method.
func (m *MockProductController) GetProductById(w http.ResponseWriter, r *http.Request) {
	m.ctrl.T.Helper()
	m.ctrl.Call(m, "GetProductById", w, r)
}

// GetProductById indicates an expected call of GetProductById.
func (mr *MockProductControllerMockRecorder) GetProductById(w, r interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetProductById", reflect.TypeOf((*MockProductController)(nil).GetProductById), w, r)
}

// IncreaseQuantity mocks base method.
func (m *MockProductController) IncreaseQuantity(w http.ResponseWriter, r *http.Request) {
	m.ctrl.T.Helper()
	m.ctrl.Call(m, "IncreaseQuantity", w, r)
}

// IncreaseQuantity indicates an expected call of IncreaseQuantity.
func (mr *MockProductControllerMockRecorder) IncreaseQuantity(w, r interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "IncreaseQuantity", reflect.TypeOf((*MockProductController)(nil).IncreaseQuantity), w, r)
}
